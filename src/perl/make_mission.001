#!/usr/bin/perl

$n = 1;

$title = "";
$type = "";
$start = "";
$pickup = "";
$flight2 = "";
$failed1 = "";
$failed2 = "";
$end = "";

@objects;
@o_num;
@o_lon;
@o_lat;
@o_head;
$offset_lon = 9999999999;
$offset_lat = 9999999999;
$obcnt = 0;

foreach $mission ( @ARGV ) {
#   print "doing $mission\n";
  print '<?xml version="1.0" encoding="utf-8"?>
<scenery>
    <name>Test</name>
</scenery>
';

   do_mission($mission);
} 


sub do_mission() {
   my ($m) = @_;
   if ( -f "$m/messages.txt" && -f "$m/dsf.txt" ) {
      print "<mission_$n>\n";

      print_header($m);

      read_objects($m);

      print_objects($m);

      print "</mission_$n>\n";
      $n++;
   }
}

sub read_objects() {
   my ($m) = @_;

   my $obj = 0;

   undef @objects,@o_num,@o_lon,@_lat,@o_head;

   open(DSF,"<$m/dsf.txt") or die;
   while(<DSF>) {
      chomp();
      if ( m/^OBJECT_DEF / ) {
         my($x,$opath) = split(' ');
         $objects[$obj++] = $opath;       
      } elsif ( m/^OBJECT / ) {
       
         my($x,$o,$x,$y,$z) = split(' ');

#print "o=$o x=$x y=$y z=$z\n";
         $x =~ s/^(.*)\.(.....).*/\1\2/;
         $y =~ s/^(.*)\.(.....).*/\1\2/;
         $z =~ s/\..*//g;
#print "o=$o x=$x y=$y z=$z\n";
         $o_num[$obcnt] = $o; 
         $o_lon[$obcnt] = $x; 
         $offset_lon = $x if ($x < $offset_lon);
         $o_lat[$obcnt] = $y; 
         $offset_lat = $y if ($y < $offset_lat);
         $o_head[$obcnt] = $z; 
         $obcnt++;
      }
   }
   close(DSF);
#  print " LON $offset_lon   LAT : $offset_lat\n";
}

sub print_objects() {
   my $o = 0;
   while ( $o < $obcnt) {
      print "    <object_$o>
        <obj_path>$objects[$o_num[$o]]</obj_path>
        <elevation>0</elevation>
        <dist_x>".int($o_lon[$o] - $offset_lon)."</dist_x>
        <dist_y>".int($o_lat[$o] - $offset_lat)."</dist_y>
        <heading>$o_head[$o]</heading>
        <pitch>0</pitch>
        <roll>0</roll>
        <is_patient>true</is_patient>
        <is_slingload>false</is_slingload>
        <sling_is_bambi_bucket>false</sling_is_bambi_bucket>
        <sling_instanced_drawing>true</sling_instanced_drawing>
        <sling_pos_x>0</sling_pos_x>
        <sling_pos_y>0</sling_pos_y>
        <sling_pos_z>0</sling_pos_z>
        <sling_weight>100</sling_weight>
        <sling_height>0</sling_height>
        <sling_size_x>0</sling_size_x>
        <sling_size_y>0</sling_size_y>
        <sling_size_z>0</sling_size_z>
        <sling_cw_x>0</sling_cw_x>
        <sling_cw_y>0</sling_cw_y>
        <sling_cw_z>0</sling_cw_z>
        <sling_friction_glide>0.35</sling_friction_glide>
        <sling_friction_static>3</sling_friction_static>
    </object_$o>\n";
     $o++;
  }
}


sub print_header() {
   my ($m) = @_;
   require "$m/messages.txt";
   print "    <name>$title</name>
    <type>$type</type>
    <start_text>$start</start_text>
    <pickup_text>$pickup</pickup_text>
    <flight2_text>$flight2</flight2_text>
    <failed_arr_text>$failed1</failed_arr_text>
    <failed_hosp_text>$failed2</failed_hosp_text>
    <end_text>$end</end_text>
    <sound_start>0</sound_start>
    <sound_arr>0</sound_arr>
    <sound_pickup>0</sound_pickup>
    <sound_end>0</sound_end>
    <sound_failed_arr>0</sound_failed_arr>
    <sound_failed_hops>0</sound_failed_hops>
";
}
